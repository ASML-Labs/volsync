---
- hosts: localhost
  tags:
    - e2e
    - rclone
    - unprivileged
    - volumepopulator
  vars:
    rclone_secret_name: rclone-secret
  tasks:
    - include_role:
        name: create_namespace

    - include_role:
        name: gather_cluster_info

    # We're running everything as a normal user
    - name: Define podSecurityContext
      ansible.builtin.set_fact:
        podSecurityContext:
          fsGroup: 5678
          runAsGroup: 5678
          runAsNonRoot: true
          runAsUser: 1234
          seccompProfile:
            type: RuntimeDefault
      when: not cluster_info.is_openshift

    - include_role:
        name: create_rclone_secret
      vars:
        minio_namespace: minio

    - name: Create source PVC
      kubernetes.core.k8s:
        state: present
        definition:
          kind: PersistentVolumeClaim
          apiVersion: v1
          metadata:
            name: data-source
            namespace: "{{ namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi

    - name: Write data into the source PVC
      include_role:
        name: write_to_pvc
      vars:
        data: 'data'
        path: '/datafile'
        pvc_name: 'data-source'

    - name: Sync data from source volume (w/ mSC)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: volsync.backube/v1alpha1
          kind: ReplicationSource
          metadata:
            name: source
            namespace: "{{ namespace }}"
          spec:
            sourcePVC: data-source
            trigger:
              manual: once
            rclone:
              rcloneConfigSection: rclone-data-mover
              rcloneDestPath: "rclone-{{ namespace }}"
              rcloneConfig: "{{ rclone_secret_name }}"
              copyMethod: Snapshot
              moverSecurityContext: "{{ podSecurityContext }}"
      when: podSecurityContext is defined

    - name: Sync data from source volume (w/o mSC)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: volsync.backube/v1alpha1
          kind: ReplicationSource
          metadata:
            name: source
            namespace: "{{ namespace }}"
          spec:
            sourcePVC: data-source
            trigger:
              manual: once
            rclone:
              rcloneConfigSection: rclone-data-mover
              rcloneDestPath: "rclone-{{ namespace }}"
              rcloneConfig: "{{ rclone_secret_name }}"
              copyMethod: Snapshot
      when: podSecurityContext is not defined

    - name: Wait for sync to MinIO to complete
      kubernetes.core.k8s_info:
        api_version: volsync.backube/v1alpha1
        kind: ReplicationSource
        name: source
        namespace: "{{ namespace }}"
      register: res
      until: >
        res.resources | length > 0 and
        res.resources[0].status.lastManualSync is defined and
        res.resources[0].status.lastManualSync=="once" and
        res.resources[0].status.latestMoverStatus is defined and
        res.resources[0].status.latestMoverStatus.result == "Successful" and
        res.resources[0].status.latestMoverStatus.logs is search("Transferred:.*") and
        res.resources[0].status.latestMoverStatus.logs is search("Elapsed time:.*") and
        res.resources[0].status.latestMoverStatus.logs is search("Rclone completed in.*")
      delay: 1
      retries: 900

    - name: Sync data to destination (w/ mSC)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: volsync.backube/v1alpha1
          kind: ReplicationDestination
          metadata:
            name: destination
            namespace: "{{ namespace }}"
          spec:
            trigger:
              manual: once
            rclone:
              rcloneConfigSection: rclone-data-mover
              rcloneDestPath: "rclone-{{ namespace }}"
              rcloneConfig: "{{ rclone_secret_name }}"
              copyMethod: Snapshot
              accessModes: [ReadWriteOnce]
              capacity: 1Gi
              moverSecurityContext: "{{ podSecurityContext }}"
      when: podSecurityContext is defined

    - name: Sync data to destination (w/o mSC)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: volsync.backube/v1alpha1
          kind: ReplicationDestination
          metadata:
            name: destination
            namespace: "{{ namespace }}"
          spec:
            trigger:
              manual: once
            rclone:
              rcloneConfigSection: rclone-data-mover
              rcloneDestPath: "rclone-{{ namespace }}"
              rcloneConfig: "{{ rclone_secret_name }}"
              copyMethod: Snapshot
              accessModes: [ReadWriteOnce]
              capacity: 1Gi
      when: podSecurityContext is not defined

    - name: Wait for sync from MinIO to complete
      kubernetes.core.k8s_info:
        api_version: volsync.backube/v1alpha1
        kind: ReplicationDestination
        name: destination
        namespace: "{{ namespace }}"
      register: res
      until: >
        res.resources | length > 0 and
        res.resources[0].status.lastManualSync is defined and
        res.resources[0].status.lastManualSync=="once" and
        res.resources[0].status.latestMoverStatus is defined and
        res.resources[0].status.latestMoverStatus.result == "Successful" and
        res.resources[0].status.latestMoverStatus.logs is search("Transferred:.*") and
        res.resources[0].status.latestMoverStatus.logs is search("Elapsed time:.*") and
        res.resources[0].status.latestMoverStatus.logs is search("Rclone completed in.*")
      delay: 1
      retries: 300

    # Check that the dynamically provisioned destination PVC is still there
    # and that it has NOT been cleaned up
    - name: Confirm dynamically provisioned destination PVC is preserved (no cleanup by default)
      kubernetes.core.k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        name: volsync-destination-dest
        namespace: "{{ namespace }}"
      register: destpvc

    - name: Check dest pvc was not deleted
      ansible.builtin.fail:
        msg: destination pvc (dynamically provisioned by volsync) should be preserved, but has been deleted
      when:
        destpvc.resources | length == 0

    - name: Convert latestImage to PVC using VolumePopulator
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: data-dest
            namespace: "{{ namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            dataSourceRef:
              kind: ReplicationDestination
              apiGroup: volsync.backube
              name: destination
            resources:
              requests:
                storage: 1Gi
      when: cluster_info.volumepopulator_supported

    - name: Convert latestImage to PVC
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: data-dest
            namespace: "{{ namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            dataSource:
              kind: VolumeSnapshot
              apiGroup: snapshot.storage.k8s.io
              name: "{{ res.resources[0].status.latestImage.name }}"
            resources:
              requests:
                storage: 1Gi
      when: not cluster_info.volumepopulator_supported

    - name: Verify contents of PVC
      include_role:
        name: compare_pvc_data
      vars:
        pvc1_name: data-source
        pvc2_name: data-dest
        timeout: 900
